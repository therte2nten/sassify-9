@use 'sass:meta';
@use 'sass:map';
@use '../type/is-map' as *;
@use '../../helpers/invalid-type-log' as *;

/// –§—É–Ω–∫—Ü–∏—è `map-deep-set()` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
/// –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–∞—Ä—Ç–µ (map)
/// ---
/// @name map-deep-set
/// @group utilities
/// @since 9.0.0
/// @access public
/// @author Kitty Giraudel
/// @example scss –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Sass (SCSS)
/// 	@use 'node_modules/@therteenten/sassify' as sassify;
///
/// 	$map: (
/// 		a: 'Item A',
/// 		b: 'Item B',
/// 		c: 'Item C',
/// 		d: (
/// 			d-a: 'Item D-A',
/// 			d-b: 'Item D-B'
/// 		)
/// 	);
///
/// 	@debug sassify.map-deep-set($map, a, 'New Item A'); //=> (a: "New Item A", b: "Item B", c: "Item C", d: (d-a: "Item D-A", d-b: "Item D-B"))
/// 	@debug sassify.map-deep-set($map, d d-a, 'New Item D-A'); //=> (a: "Item A", b: "Item B", c: "Item C", d: (d-a: "New Item D-A", d-b: "Item D-B"))
/// 	@debug sassify.map-deep-set($map, d, 'Item D'); //=> (a: "Item A", b: "Item B", c: "Item C", d: "Item D")
/// @param {map} $map - –∫–∞—Ä—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å
/// 	–∫–∞–∫–æ–µ-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ
/// @param {string | number} $keys - –∫–ª—é—á –≤ –∫–∞—Ä—Ç–µ `$map`,
///  –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å
/// @param {string | number} $value - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
/// 	`$keys` –≤ –∫–∞—Ä—Ç–µ `$map`
/// @return {map} –∫–∞—Ä—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–ª—é—á–µ–π
@function map-deep-set($map, $keys, $value) {

	// ? –ï—Å–ª–∏ `$map` —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä—Ç–æ–π:
	@if is-map($map) == true {

		$-maps: ($map,);
		$-result: null;

		// ? –ï—Å–ª–∏ –∫–ª—é—á `$keys` —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π
		// ? –∫–∞—Ä—Ç–æ–π, —Ç–æ –æ–ø–æ–≤–µ—â–∞—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ —Ç–æ–º,
		// ? —á—Ç–æ –∫–ª—é—á –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω:
		@if meta.type-of(nth($keys, -1)) == map {
			@warn 'üüß <#{configs.$sassify}> –ü–æ—Å–ª–µ–¥–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–ª—é—á ‚Äî —ç—Ç–æ –∫–∞—Ä—Ç–∞ [map]. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é "#{$value}"!';
		}

		// ? –ï—Å–ª–∏ `$keys` - —ç—Ç–æ –æ–¥–∏–Ω –∫–ª—é—á, —Ç–æ –ø—Ä–æ—Å—Ç–æ
		// ? –æ–±—ä–µ–¥–∏–Ω—è—é –∏ –≤–æ–∑—Ä–∞—â–∞—é –µ–≥–æ:
		@if length($keys) == 1 {
			@return map-merge($map, ($keys: $value));
		}

		// –¶–∏–∫–ª–æ–º `@for` –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
		// –∏–∑ `$-maps` –ø—Ä–æ—Ö–æ–∂—É:
		// > –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º –≤ —Å–ø–∏—Å–∫–µ `$-maps`
		@for $-i from 1 through length($keys) - 1 {

			$-current-key: nth($keys, $-i);
			$-current-map: nth($-maps, -1);
			$-current-get: map-get($-current-map, $-current-key);

			// –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:
			@if $-current-get == null {
				@error '#{alert.$alert--emoji__error} #{alert.$alert--prefix} –ö–ª—é—á `#{$keys}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –∫–∞—Ä—Ç—ã!';
			}

			$-maps: append($-maps, $-current-get);

		}

		// –¶–∏–∫–ª –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã –∫ –ø–µ—Ä–≤–æ–π.
		// –û–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º:
		@for $-i from length($-maps) through 1 {

			$-current-map: nth($-maps, $-i);
			$-current-key: nth($keys, $-i);
			$-current-val: if(
				$-i == length($-maps),
				$value,
				$-result
			);

			$-result: map-merge($-current-map, ($-current-key: $-current-val));

		}

		// –í–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
		@return $-result;

	}

	// ? –ï—Å–ª–∏ `$map` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä—Ç–æ–π:
	@else {
		@return invalid-type-log('map-deep-set', $map, 'map');
	}

}
